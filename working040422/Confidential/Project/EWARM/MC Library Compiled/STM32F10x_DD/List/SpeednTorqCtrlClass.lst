###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.7.9843/W32 for ARM        27/Jan/2017  12:47:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c
#    Command line =  
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D MC_LIBRARY_DUAL -lcN "C:\JOHNS
#        MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\List" -o "C:\JOHNS MOTOR STUFF\EA082 Baseline on
#        LIBv4.2 - MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\Obj" --debug --endian=little --cpu=Cortex-M3 -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I "C:\JOHNS MOTOR
#        STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\" -I "C:\JOHNS MOTOR STUFF\EA082
#        Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\" -I "C:\JOHNS MOTOR
#        STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\inc\" -I "C:\JOHNS
#        MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\interface\" -I
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\interface\common\" -I
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\List\SpeednTorqCtrlClass.lst
#    Object file  =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\Obj\SpeednTorqCtrlClass.o
#
###############################################################################

C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 - MA302\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c
      1          /**
      2            ******************************************************************************
      3            * @file    SpeednTorqCtrlClass.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.2.0
      6            * @date    20-Aug-2015 18:06
      7            * @brief   This file contains interface of SpeednTorqCtrl class
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "SpeednTorqCtrlClass.h"
     30          #include "SpeednTorqCtrlPrivate.h"
     31          #include "MCLibraryConf.h"
     32          #include "MC_type.h"
     33          
     34          // dcnq17 new variables
     35          extern unsigned short speedangle;
     36          extern unsigned short oldspeedangle;
     37          extern signed short myspeed;
     38          
     39          
     40          #ifdef MC_CLASS_DYNAMIC
     41            #include "stdlib.h" /* Used for dynamic allocation */
     42          #else
     43            _CSTC_t STCpool[MAX_STC_NUM];
     44            unsigned char STC_Allocated = 0u;
     45          #endif
     46            
     47          #define CLASS_VARS   &((_CSTC)this)->Vars_str
     48          #define CLASS_PARAMS  ((_CSTC)this)->pParams_str
     49            
     50          #define CHECK_BOUNDARY
     51          
     52          /**
     53            * @brief  Creates an object of the class SpeednTorqCtrl
     54            * @param  pSpeednTorqCtrlParams pointer to an SpeednTorqCtrl parameters structure
     55            * @retval CSTC new instance of SpeednTorqCtrl object
     56            */
     57          CSTC STC_NewObject(pSpeednTorqCtrlParams_t pSpeednTorqCtrlParams)
     58          {
     59            _CSTC _oSTC;
     60            
     61            #ifdef MC_CLASS_DYNAMIC
     62              _oSTC = (_CSTC)calloc(1u,sizeof(_CSTC_t));
     63            #else
     64              if (STC_Allocated  < MAX_STC_NUM)
     65              {
     66                _oSTC = &STCpool[STC_Allocated++];
     67              }
     68              else
     69              {
     70                _oSTC = MC_NULL;
     71              }
     72            #endif
     73            
     74            _oSTC->pParams_str = (pParams_t)pSpeednTorqCtrlParams;
     75            
     76            return ((CSTC)_oSTC);
     77          }
     78          
     79          /**
     80            * @brief  Initializes all the object variables, usually it has to be called 
     81            *         once right after object creation.
     82            * @param  this related object of class CSTC.
     83            * @param  oPI the PI object used as controller for the speed regulation.
     84            *         It can be equal to MC_NULL if the STC is initialized in torque mode
     85            *         and it will never be configured in speed mode.
     86            * @param  oSPD the speed sensor used to perform the speed regulation.
     87            *         It can be equal to MC_NULL if the STC is used only in torque 
     88            *         mode.
     89            * @retval none.
     90            */
     91          void STC_Init(CSTC this, CPI oPI, CSPD oSPD)
     92          {
     93            pVars_t pVars = CLASS_VARS;
     94            pParams_t pParams = CLASS_PARAMS;
     95            
     96          	pVars->oPISpeed = oPI;
     97            pVars->oSPD = oSPD;
     98            pVars->bMode = pParams->bModeDefault;
     99          	pVars->wSpeedRef01HzExt = (int32_t)pParams->hMecSpeedRef01HzDefault * 65536;
    100          	pVars->wTorqueRef = (int32_t)pParams->hTorqueRefDefault * 65536;
    101            pVars->hTargetFinal = 0;
    102          	pVars->wRampRemainingStep = 0u;
    103          	pVars->wIncDecAmount = 0;
    104          }
    105          
    106          /**
    107            * @brief It sets in real time the speed sensor utilized by the STC. 
    108            * @param this related object of class CSTC
    109            * @param oSPD Speed sensor object to be set.
    110            * @retval none
    111            */
    112          void STC_SetSpeedSensor(CSTC this, CSPD oSPD)
    113          {
    114            pVars_t pVars = CLASS_VARS;  
    115            pVars->oSPD = oSPD;
    116          }
    117          
    118          /**
    119            * @brief It returns the speed sensor utilized by the FOC. 
    120            * @param this related object of class CSTC
    121            * @retval CSPD speed sensor utilized by the FOC.
    122            */
    123          CSPD STC_GetSpeedSensor(CSTC this)
    124          {
    125            pVars_t pVars = CLASS_VARS;
    126            return (pVars->oSPD);
    127          }
    128          
    129          /**
    130            * @brief  It should be called before each motor restart. If STC is set in
    131                      speed mode, this method resets the integral term of speed regulator.
    132            * @param this related object of class CSTC.
    133            * @retval none.
    134            */
    135          void STC_Clear(CSTC this)
    136          {
    137            pVars_t pVars = CLASS_VARS;
    138            if (pVars->bMode == STC_SPEED_MODE)
    139            {
    140              PI_SetIntegralTerm(((_CSTC)this)->Vars_str.oPISpeed,0);
    141            }
    142          }
    143          
    144          /**
    145            * @brief  Get the current mechanical rotor speed reference expressed in tenths
    146            *         of HZ. 
    147            * @param  this related object of class CSTC.
    148            * @retval int16_t current mechanical rotor speed reference expressed in tenths
    149            *         of HZ. 
    150            */
    151          int16_t STC_GetMecSpeedRef01Hz(CSTC this)
    152          {
    153            return ((int16_t)(((_CSTC)this)->Vars_str.wSpeedRef01HzExt/65536));
    154          }
    155          
    156          /**
    157            * @brief  Get the current motor torque reference. This value represents 
    158            *         actually the Iq current reference expressed in digit.
    159            *         To convert current expressed in digit to current expressed in Amps
    160            *         is possible to use the formula: 
    161            *         Current(Amp) = [Current(digit) * Vdd micro] / [65536 * Rshunt * Aop]
    162            * @param  this related object of class CSTC.
    163            * @retval int16_t current motor torque reference. This value represents 
    164            *         actually the Iq current expressed in digit.
    165            */
    166          int16_t STC_GetTorqueRef(CSTC this)
    167          {
    168            return ((int16_t)(((_CSTC)this)->Vars_str.wTorqueRef/65536));
    169          }
    170          
    171          /**
    172            * @brief  Set the modality of the speed and torque controller. Two modality 
    173            *         are available Torque mode and Speed mode.
    174            *         In Torque mode is possible to set directly the motor torque 
    175            *         reference or execute a motor torque ramp. This value represents 
    176            *         actually the Iq current reference expressed in digit.
    177            *         In Speed mode is possible to set the mechanical rotor speed
    178            *         reference or execute a speed ramp. The required motor torque is
    179            *         automatically calculated by the STC.
    180            *         This command interrupts the execution of any previous ramp command 
    181            *         maintaining the last value of Iq.
    182            * @param  this related object of class CSTC.
    183            * @param  bMode modality of STC. It can be one of these two settings: 
    184            *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
    185            *         enable the Speed mode.
    186            * @retval none
    187            */
    188          void STC_SetControlMode(CSTC this, STC_Modality_t bMode)
    189          {
    190            pVars_t pVars = CLASS_VARS;
    191            pVars->bMode = bMode;
    192            pVars->wRampRemainingStep = 0u; /* Interrupts previous ramp. */
    193          }
    194          
    195          /**
    196            * @brief  Get the modality of the speed and torque controller. 
    197            * @param  this related object of class CSTC.
    198            * @retval STC_Modality_t It returns the modality of STC. It can be one of 
    199            *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
    200            */
    201          STC_Modality_t STC_GetControlMode(CSTC this)
    202          {
    203            pVars_t pVars = CLASS_VARS;
    204            return pVars->bMode;
    205          }
    206          
    207          /**
    208            * @brief  Starts the execution of a ramp using new target and duration. This
    209            *         command interrupts the execution of any previous ramp command.
    210            *         The generated ramp will be in the modality previously set by
    211            *         STC_SetControlMode method.
    212            * @param  this related object of class CSTC  
    213            * @param  hTargetFinal final value of command. This is different accordingly
    214            *         the STC modality. 
    215            *         If STC is in Torque mode hTargetFinal is the value of motor torque
    216            *         reference at the end of the ramp. This value represents actually the
    217            *         Iq current expressed in digit.
    218            *         To convert current expressed in Amps to current expressed in digit
    219            *         is possible to use the formula:
    220            *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
    221            *         If STC is in Speed mode hTargetFinal is the value of mechanical
    222            *         rotor speed reference at the end of the ramp expressed in tenths of
    223            *         HZ.
    224            * @param  hDurationms the duration of the ramp expressed in milliseconds. It
    225            *         is possible to set 0 to perform an instantaneous change in the value.
    226            * @retval bool It return false if the absolute value of hTargetFinal is out of
    227            *         the boundary of the application (Above max application speed or max
    228            *         application torque or below min application speed depending on
    229            *         current modality of TSC) in this case the command is ignored and the
    230            *         previous ramp is not interrupted, otherwise it returns true. 
    231            */
    232          bool STC_ExecRamp(CSTC this, int16_t hTargetFinal, uint32_t hDurationms)
    233          {
    234            pVars_t pVars = CLASS_VARS;
    235            pParams_t pParams = CLASS_PARAMS;
    236            bool AllowedRange = TRUE;
    237            uint32_t wAux;
    238            int32_t wAux1;
    239            int16_t hCurrentReference;
    240            
    241            /* Check if the hTargetFinal is out of the bound of application. */
    242            if (pVars->bMode == STC_TORQUE_MODE)
    243            {
    244              hCurrentReference = STC_GetTorqueRef(this);
    245              #ifdef CHECK_BOUNDARY
    246              if ((int32_t)hTargetFinal > (int32_t)pParams->hMaxPositiveTorque)
    247              {
    248                AllowedRange = FALSE;
    249              }
    250              if (hTargetFinal < pParams->hMinNegativeTorque)
    251              {
    252                AllowedRange = FALSE;
    253              }
    254              #endif
    255            }
    256            else
    257            {
    258              hCurrentReference = SPD_GetAvrgMecSpeed01Hz(pVars->oSPD);
    259              pVars->wSpeedRef01HzExt = (int32_t)hCurrentReference * (int32_t)65536;
    260              #ifdef CHECK_BOUNDARY
    261              if ((int32_t)hTargetFinal > (int32_t)pParams->hMaxAppPositiveMecSpeed01Hz)
    262              {
    263                AllowedRange = FALSE;
    264              } else
    265                if (hTargetFinal < pParams->hMinAppNegativeMecSpeed01Hz)
    266                {
    267                  AllowedRange = FALSE;
    268                } else
    269                  if ((int32_t)hTargetFinal < (int32_t)pParams->hMinAppPositiveMecSpeed01Hz)
    270                  {
    271                    if (hTargetFinal > pParams->hMaxAppNegativeMecSpeed01Hz)
    272                    {
    273                      AllowedRange = FALSE;
    274                    }
    275                  }
    276                  else{}
    277              #endif
    278            }
    279            
    280            if (AllowedRange == TRUE)
    281            {
    282              /* Interrupts the execution of any previous ramp command */
    283              
    284              if (hDurationms == 0u)
    285              {
    286                if (pVars->bMode == STC_SPEED_MODE)
    287                {
    288                  pVars->wSpeedRef01HzExt = (int32_t)hTargetFinal * 65536;
    289                }
    290                else
    291                {
    292                  pVars->wTorqueRef = (int32_t)hTargetFinal * 65536;
    293                }
    294                pVars->wRampRemainingStep = 0u;
    295                pVars->wIncDecAmount = 0;
    296              }
    297              else
    298              {
    299                /* Store the hTargetFinal to be applied in the last step */
    300                pVars->hTargetFinal = hTargetFinal;
    301                
    302                /* Compute the (wRampRemainingStep) number of steps remaining to complete 
    303                the ramp. */
    304                wAux = (uint32_t)hDurationms * (uint32_t)pParams->hSTCFrequencyHz;
    305                wAux /= 1000u;
    306                pVars->wRampRemainingStep = wAux;
    307                pVars->wRampRemainingStep++;
    308                
    309                /* Compute the increment/decrement amount (wIncDecAmount) to be applied to 
    310                the reference value at each CalcTorqueReference. */
    311                wAux1 = ((int32_t)hTargetFinal - (int32_t)hCurrentReference) * 65536;
    312                wAux1 /= (int32_t)pVars->wRampRemainingStep;
    313                pVars->wIncDecAmount = wAux1;
    314              }
    315            }
    316          
    317            return AllowedRange;
    318          }
    319          
    320          /**
    321            * @brief  This command interrupts the execution of any previous ramp command.
    322            *         If STC has been set in Torque mode the last value of Iq is
    323            *         maintained.
    324            *         If STC has been set in Speed mode the last value of mechanical
    325            *         rotor speed reference is maintained.
    326            * @param  this related object of class CSTC.
    327            * @retval none
    328            */
    329          void STC_StopRamp(CSTC this)
    330          {
    331            pVars_t pVars = CLASS_VARS;
    332            pVars->wRampRemainingStep = 0u;
    333          	pVars->wIncDecAmount = 0;
    334          }
    335          
    336          /**
    337            * @brief  It is used to compute the new value of motor torque reference. It
    338            *         must be called at fixed time equal to hSTCFrequencyHz. It is called
    339            *         passing as parameter the speed sensor used to perform the speed
    340            *         regulation.
    341            * @param  this related object of class CSTC.
    342            * @retval int16_t motor torque reference. This value represents actually the
    343            *         Iq current expressed in digit.
    344            *         To convert current expressed in Amps to current expressed in digit
    345            *         is possible to use the formula:
    346            *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
    347            */
    348          int16_t STC_CalcTorqueReference(CSTC this)
    349          {
    350            pVars_t pVars = CLASS_VARS;
    351            int32_t wCurrentReference;
    352            int16_t hTorqueReference = 0;
    353            int16_t hMeasuredSpeed;
    354            int16_t hTargetSpeed;
    355            int16_t hError;
    356            
    357            if (pVars->bMode == STC_TORQUE_MODE)
    358            {
    359              wCurrentReference = pVars->wTorqueRef;
    360            }
    361            else
    362            {
    363              wCurrentReference = pVars->wSpeedRef01HzExt;
    364            }
    365            
    366            /* Update the speed reference or the torque reference according to the mode 
    367               and terminates the ramp if needed. */
    368            if (pVars->wRampRemainingStep > 1u)
    369            {
    370              /* Increment/decrement the reference value. */
    371              wCurrentReference += pVars->wIncDecAmount;
    372              
    373              /* Decrement the number of remaining steps */
    374              pVars->wRampRemainingStep--;
    375            }
    376            else if (pVars->wRampRemainingStep == 1u)
    377            {
    378              /* Set the backup value of hTargetFinal. */
    379              wCurrentReference = (int32_t)pVars->hTargetFinal * 65536;
    380              pVars->wRampRemainingStep = 0u;
    381            }
    382            else
    383            {
    384              /* Do nothing. */
    385            }
    386            
    387            if (pVars->bMode == STC_SPEED_MODE)
    388            {
    389              /* Run the speed control loop */
    390          
    391          
    392          // dcnq17 calculate new speed estimate as first order difference in angle
    393          myspeed = speedangle - oldspeedangle;
    394          oldspeedangle = speedangle;
    395          
    396          DAC->DHR12L1 =  myangle;   //JDO
    397          DAC->SWTRIGR=1;
    398          
    399              
    400              /* Compute speed error */
    401          // dcnq17  re-calibrate reference for new speed feedback
    402          //    hTargetSpeed = (int16_t)(wCurrentReference / 65536);
    403              hTargetSpeed = (int16_t)(wCurrentReference / 9972); // JDO fb is 6.67 times bigger
    404              hMeasuredSpeed = SPD_GetAvrgMecSpeed01Hz(pVars->oSPD);
    405          
    406          // dcnq17  use new speed feedback to calculate error
    407          //    hError = hTargetSpeed - hMeasuredSpeed;
    408              hError = hTargetSpeed - myspeed;
    409          
    410              hTorqueReference = PI_Controller(pVars->oPISpeed, (int32_t)hError);
    411          
    412          // dcnq17 output scaled speed to DAC
    413          // DAC->DHR12L1 =  myspeed * 10;  JDO REMOVED TO CHANGE DAC
    414          // DAC->SWTRIGR=1;
    415              
    416              pVars->wSpeedRef01HzExt = wCurrentReference;
    417              pVars->wTorqueRef = (int32_t)hTorqueReference * 65536;
    418            }
    419            else
    420            {
    421              pVars->wTorqueRef = wCurrentReference;
    422              hTorqueReference = (int16_t)(wCurrentReference / 65536);
    423            }
    424            
    425            return hTorqueReference;
    426          
    427          }
    428          
    429          /**
    430            * @brief  Get the Default mechanical rotor speed reference expressed in tenths
    431            *         of HZ.
    432            * @param  this related object of class CSTC.
    433            * @retval int16_t It returns the Default mechanical rotor speed. reference 
    434            *         expressed in tenths of HZ.
    435            */
    436          int16_t STC_GetMecSpeedRef01HzDefault(CSTC this)
    437          {
    438            pParams_t pParams = CLASS_PARAMS;
    439          
    440            return pParams->hMecSpeedRef01HzDefault;
    441          }
    442          
    443          /**
    444            * @brief  Get the Application maximum positive value of rotor speed. It's 
    445                      expressed in tenth of mechanical Hertz.
    446            * @param  this related object of class CSTC.
    447            * @retval uint16_t It returns the application maximum positive value of rotor
    448                      speed expressed in tenth of mechanical Hertz.
    449            */
    450          uint16_t STC_GetMaxAppPositiveMecSpeed01Hz(CSTC this)
    451          {
    452            pParams_t pParams = CLASS_PARAMS;
    453          
    454            return pParams->hMaxAppPositiveMecSpeed01Hz;
    455          }
    456          
    457          /**
    458            * @brief  Get the Application minimum negative value of rotor speed. It's 
    459                      expressed in tenth of mechanical Hertz.
    460            * @param  this related object of class CSTC.
    461            * @retval uint16_t It returns the application minimum negative value of rotor
    462                      speed expressed in tenth of mechanical Hertz.
    463            */
    464          int16_t STC_GetMinAppNegativeMecSpeed01Hz(CSTC this)
    465          {
    466            pParams_t pParams = CLASS_PARAMS;
    467          
    468            return pParams->hMinAppNegativeMecSpeed01Hz;
    469          }
    470          
    471          /**
    472            * @brief  Check if the settled speed or torque ramp has been completed.
    473            * @param  this related object of class CSTC.
    474            * @retval bool It returns TRUE if the ramp is completed, FALSE otherwise.
    475            */
    476          bool STC_RampCompleted(CSTC this)
    477          {
    478            pVars_t pVars = CLASS_VARS;
    479            bool retVal = FALSE;
    480            if (pVars->wRampRemainingStep == 0u)
    481            {
    482              retVal = TRUE;
    483            }
    484            return retVal;
    485          }
    486                                                       
    487          /**
    488            * @brief It returns the default values of Iqdref. 
    489            * @param this related object of class CSTC
    490            * @retval default values of Iqdref.
    491            */
    492          Curr_Components STC_GetDefaultIqdref(CSTC this)
    493          {
    494            pParams_t pParams = CLASS_PARAMS;
    495            Curr_Components IqdRefDefault;
    496            IqdRefDefault.qI_Component1 = pParams->hTorqueRefDefault;
    497            IqdRefDefault.qI_Component2 = pParams->hIdrefDefault;
    498            return IqdRefDefault;
    499          }
    500          
    501          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

Errors: 1
Warnings: 1
