###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.7.9843/W32 for ARM        27/Jan/2017  12:47:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\MCLibrary\src\StateMachineClass.c
#    Command line =  
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\MCLibrary\src\StateMachineClass.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D MC_LIBRARY_DUAL -lcN "C:\JOHNS
#        MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\List" -o "C:\JOHNS MOTOR STUFF\EA082 Baseline on
#        LIBv4.2 - MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\Obj" --debug --endian=little --cpu=Cortex-M3 -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I "C:\JOHNS MOTOR
#        STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\" -I "C:\JOHNS MOTOR STUFF\EA082
#        Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\" -I "C:\JOHNS MOTOR
#        STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\inc\" -I "C:\JOHNS
#        MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\interface\" -I
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\MCLibrary\interface\common\" -I
#        "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\List\StateMachineClass.lst
#    Object file  =  
#        C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 -
#        MA302\Confidential\Project\EWARM\MC Library
#        Compiled\STM32F10x_DD\Obj\StateMachineClass.o
#
###############################################################################

C:\JOHNS MOTOR STUFF\EA082 Baseline on LIBv4.2 - MA302\Confidential\MCLibrary\src\StateMachineClass.c
      1          /**
      2            ******************************************************************************
      3            * @file    StateMachineClass.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.2.0
      6            * @date    20-Aug-2015 18:06
      7            * @brief   This file contains interface of StateMachine class
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "StateMachineClass.h"
     30          #include "StateMachinePrivate.h"
     31          #include "MCLibraryConf.h"
     32          #include "MC_type.h"
     33          
     34          #ifdef MC_CLASS_DYNAMIC
     35            #include "stdlib.h" /* Used for dynamic allocation */
     36          #else
     37            _CSTM_t STMpool[MAX_STM_NUM];
     38            unsigned char STM_Allocated = 0u;
     39          #endif
     40          
     41          #define CLASS_VARS   ((_CSTM)this)->Vars_str
     42          #define CLASS_PARAMS  ((_CSTM)this)->pParams_str  
     43            
     44          /**
     45            * @brief  Creates an object of the class StateMachine
     46            * @param  pStateMachineParams pointer to an StateMachine parameters structure
     47            * @retval CSTM new instance of StateMachine object
     48            */
     49          CSTM STM_NewObject(void)
     50          {
     51            _CSTM _oSTM;
     52            
     53            #ifdef MC_CLASS_DYNAMIC
     54              _oSTM = (_CSTM)calloc(1u,sizeof(_CSTM_t));
     55            #else
     56              if (STM_Allocated  < MAX_STM_NUM)
     57              {
     58                _oSTM = &STMpool[STM_Allocated++];
     59              }
     60              else
     61              {
     62                _oSTM = MC_NULL;
     63              }
     64            #endif
     65            
     66            return ((CSTM)_oSTM);
     67          }
     68          
     69          
     70          /**
     71            * @brief  Initializes all the object variables, usually it has to be called 
     72            *         once right after object creation.
     73            * @param this related object of class CSTM.
     74            * @retval none.
     75            */
     76          void STM_Init(CSTM this)
     77          {
     78            pVars_t pVars = &CLASS_VARS;
     79            
     80            pVars->bState = IDLE;
     81            pVars->hFaultNow = MC_NO_FAULTS;     
     82            pVars->hFaultOccurred = MC_NO_FAULTS;  
     83          }     
     84          
     85          /**
     86            * @brief It submits the request for moving the state machine into the state 
     87            *        specified by bState (FAULT_NOW and FAUL_OVER are not handled by this 
     88            *        method). Accordingly with the current state, the command is really
     89            *        executed (state machine set to bState) or discarded (no state 
     90            *        changes).
     91            *        If requested state can't be reached the return value is FALSE and the 
     92            *        MC_SW_ERROR is raised, but if requested state is IDLE_START, 
     93            *        IDLE_ALIGNMENT or ANY_STOP, that corresponds with the user actions: 
     94            *        Start Motor, Encoder Alignemnt and Stop Motor, the MC_SW_ERROR is
     95            *        not raised.
     96            * @param this related object of class CSTM.
     97            * @param bState New requested state
     98            * @retval bool It returns TRUE if the state has been really set equal to 
     99            *         bState, FALSE if the requested state can't be reached
    100            */
    101          bool STM_NextState(CSTM this, State_t bState)
    102          {
    103            bool bChangeState = FALSE;
    104            pVars_t pVars = &CLASS_VARS;
    105            State_t bCurrentState = pVars->bState;
    106            State_t bNewState = bCurrentState;
    107            
    108            switch(bCurrentState)
    109            {
    110            case ICLWAIT:
    111              if (bState == IDLE)
    112              {
    113                bNewState = bState;
    114                bChangeState = TRUE;
    115              }  
    116              break;
    117            case IDLE:
    118              if((bState == IDLE_START) || (bState == IDLE_ALIGNMENT) 
    119                                        || (bState == ICLWAIT))
    120              {
    121                bNewState = bState;
    122                bChangeState = TRUE;
    123              }
    124              break;
    125              
    126            case IDLE_ALIGNMENT:
    127              if((bState == ANY_STOP) || (bState == ALIGN_CHARGE_BOOT_CAP) 
    128                                      || (bState == ALIGN_OFFSET_CALIB))
    129              {
    130                bNewState = bState;
    131                bChangeState = TRUE;
    132              }
    133              break;
    134              
    135            case ALIGN_CHARGE_BOOT_CAP:
    136              if ((bState == ALIGN_OFFSET_CALIB) || (bState == ANY_STOP))
    137              {
    138                bNewState = bState;
    139                bChangeState = TRUE;
    140              }
    141              break;
    142              
    143              case ALIGN_OFFSET_CALIB:
    144                if ((bState == ALIGN_CLEAR) || (bState == ANY_STOP))
    145                {
    146                  bNewState = bState;
    147                  bChangeState = TRUE;
    148                }
    149                break;
    150                
    151            case ALIGN_CLEAR:
    152              if ((bState == ALIGNMENT) || (bState == ANY_STOP))
    153              {
    154                bNewState = bState;
    155                bChangeState = TRUE;
    156              }
    157              break;      
    158              
    159            case ALIGNMENT:
    160              if(bState == ANY_STOP)
    161              {
    162                bNewState = bState;
    163                bChangeState = TRUE;
    164              }
    165              break;  
    166              
    167            case IDLE_START:
    168              if((bState == ANY_STOP) || (bState == CHARGE_BOOT_CAP) ||
    169                 (bState == OFFSET_CALIB) || (bState == IDLE_ALIGNMENT))
    170              {
    171                bNewState = bState;
    172                bChangeState = TRUE;
    173              }
    174              break;
    175              
    176            case CHARGE_BOOT_CAP:
    177              if ((bState == OFFSET_CALIB) || (bState == ANY_STOP))
    178              {
    179                bNewState = bState;
    180                bChangeState = TRUE;
    181              }
    182              break;
    183              
    184              case OFFSET_CALIB:
    185                if ((bState == CLEAR) || (bState == ANY_STOP))
    186                {
    187                  bNewState = bState;
    188                  bChangeState = TRUE;
    189                }
    190                break;
    191                
    192            case CLEAR:
    193              if ((bState == START) || (bState == ANY_STOP))
    194              {
    195                bNewState = bState;
    196                bChangeState = TRUE;
    197              }
    198              break;
    199              
    200            case START:
    201              if((bState == START_RUN) || (bState == ANY_STOP))
    202              {
    203                bNewState = bState;
    204                bChangeState = TRUE;
    205              }
    206              break;
    207              
    208            case START_RUN:
    209              if((bState == RUN) || (bState == ANY_STOP))
    210              {
    211                bNewState = bState;
    212                bChangeState = TRUE;
    213              }
    214              break;       
    215              
    216            case RUN:
    217              if(bState == ANY_STOP)
    218              {
    219                bNewState = bState;
    220                bChangeState = TRUE;
    221              }
    222              break;          
    223              
    224            case ANY_STOP:
    225              if(bState == STOP)
    226              {
    227                bNewState = bState;
    228                bChangeState = TRUE;
    229              }
    230              break;      
    231              
    232            case STOP:
    233              if(bState == STOP_IDLE)
    234              {
    235                bNewState = bState;
    236                bChangeState = TRUE;
    237              }
    238              break;       
    239              
    240            case STOP_IDLE:
    241              if((bState == IDLE)||(bState == ICLWAIT))
    242              {
    243                bNewState = bState;
    244                bChangeState = TRUE;
    245              }
    246              break;      
    247            default:
    248              break;
    249            }
    250            
    251            if (bChangeState)
    252            {
    253              pVars->bState = bNewState;
    254            }
    255            else
    256            {
    257              if (!((bState == IDLE_START) || (bState == IDLE_ALIGNMENT) 
    258                             || (bState == ANY_STOP)))
    259              {
    260                /* If new state is not a user command START/STOP raise a software error */
    261                STM_FaultProcessing(this, MC_SW_ERROR, 0u);
    262              }
    263            }
    264            
    265            return(bChangeState); 
    266          }
    267          
    268          /**
    269            * @brief It clocks both HW and SW faults processing and update the state 
    270            *        machine accordingly with hSetErrors, hResetErrors and present state. 
    271            *        Refer to State_t description for more information about fault states.
    272            * @param this object of class CSTM
    273            * @param hSetErrors Bit field reporting faults currently present
    274            * @param hResetErrors Bit field reporting faults to be cleared
    275            * @retval State_t New state machine state after fault processing
    276            */
    277          State_t STM_FaultProcessing(CSTM this, uint16_t hSetErrors, uint16_t 
    278                                                                            hResetErrors)
    279          {
    280            pVars_t pVars = &CLASS_VARS;  
    281            State_t LocalState =  pVars->bState;
    282            uint16_t hAux;
    283            if (hSetErrors == MC_SPEED_FDBK) return(0);  // JDO  ADDED THIS LINE SKIP FEEDBACK ERROR
    284            
    285            /* Set corrent errors */
    286            hAux = (uint16_t)(pVars->hFaultNow);
    287            hAux |= hSetErrors;  
    288            pVars->hFaultNow = (FaultCondition_t)(hAux);
    289            hAux = (uint16_t)(pVars->hFaultOccurred);
    290            hAux |= hSetErrors; 
    291            pVars->hFaultOccurred = (FaultCondition_t)(hAux);
    292            /* Reset current errors */
    293            hAux = (uint16_t)(pVars->hFaultNow);
    294            hAux &= (uint16_t)(~hResetErrors);
    295            pVars->hFaultNow = (FaultCondition_t)(hAux);
    296           
    297            if(LocalState == FAULT_NOW)
    298            {
    299              if (pVars->hFaultNow == MC_NO_FAULTS)
    300              {
    301                pVars->bState = FAULT_OVER;
    302                LocalState = FAULT_OVER;
    303              }
    304            }  
    305            else
    306            {
    307              if (pVars->hFaultNow != MC_NO_FAULTS)
    308              {
    309                pVars->bState = FAULT_NOW;
    310                LocalState = FAULT_NOW;
    311              }
    312            }
    313            
    314            return (LocalState);
    315          }
    316          
    317          #if defined (CCMRAM)
    318          #if defined (__ICCARM__)
    319          #pragma location = ".ccmram"
    320          #elif defined (__CC_ARM)
    321          __attribute__((section ("ccmram")))
    322          #endif
    323          #endif
    324          /**
    325            * @brief  Returns the current state machine state
    326            * @param  this object of class CSTM
    327            * @retval State_t Current state machine state
    328            */
    329          State_t STM_GetState(CSTM this)
    330          {
    331            return(CLASS_VARS.bState);
    332          }
    333          
    334          
    335          /**
    336            * @brief It reports to the state machine that the fault state has been 
    337            *        acknowledged by the user. If the state machine is in FAULT_OVER state
    338            *        then it is moved into STOP_IDLE and the bit field variable containing 
    339            *        information about the faults historically occured is cleared. 
    340            *        The method call is discarded if the state machine is not in FAULT_OVER
    341            * @param this object of class CSTM
    342            * @retval bool TRUE if the state machine has been moved to IDLE, FALSE if the 
    343            *        method call had no effects 
    344            */
    345          bool STM_FaultAcknowledged(CSTM this)
    346          {
    347           bool bToBeReturned = FALSE;
    348           pVars_t pVars = &CLASS_VARS;   
    349          
    350           if(pVars->bState == FAULT_OVER)
    351           {
    352            pVars->bState = STOP_IDLE;
    353            pVars->hFaultOccurred = MC_NO_FAULTS;  
    354            bToBeReturned = TRUE;
    355           }
    356          
    357           return(bToBeReturned);  
    358          }
    359          
    360          
    361          /**
    362            * @brief It returns two 16 bit fields containing information about both faults
    363            *        currently present and faults historically occurred since the state 
    364            *        machine has been moved into state
    365            * @param this object of class CSTM.
    366            * @retval uint32_t  Two 16 bit fields: in the most significant half are stored
    367            *         the information about currently present faults. In the least 
    368            *         significant half are stored the information about the faults 
    369            *         historically occurred since the state machine has been moved into 
    370            *         FAULT_NOW state
    371            */
    372          uint32_t STM_GetFaultState(CSTM this)
    373          {
    374           uint32_t LocalFaultState;
    375           pVars_t pVars = &CLASS_VARS;   
    376           
    377           LocalFaultState = (uint32_t)(pVars->hFaultOccurred);
    378           LocalFaultState |= (uint32_t)(pVars->hFaultNow)<<16;
    379             
    380           return LocalFaultState;
    381          }
    382          
    383          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   STM_FaultAcknowledged
       4   STM_FaultProcessing
       0   STM_GetFaultState
       0   STM_GetState
       0   STM_Init
       0   STM_NewObject
       0   STM_NextState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      16  STM_Allocated
          STMpool
      22  STM_FaultAcknowledged
      54  STM_FaultProcessing
      10  STM_GetFaultState
       4  STM_GetState
      10  STM_Init
      26  STM_NewObject
     180  STM_NextState

 
  16 bytes in section .bss
 310 bytes in section .text
 
 310 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: 1
