###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       29/Jun/2021  09:24:51
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working Directory\Confidential\MCLibrary\src\RampExtMngrClass.c
#    Command line =  
#        -f C:\Users\csisko\AppData\Local\Temp\EWA225.tmp
#        ("C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working Directory\Confidential\MCLibrary\src\RampExtMngrClass.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D MC_LIBRARY_SINGLE -lcN
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\List" -o
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\Obj"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working Directory\Confidential\Project\EWARM\..\" -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working Directory\Confidential\Project\EWARM\..\..\MCLibrary\" -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working Directory\Confidential\Project\EWARM\..\..\MCLibrary\inc\" -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\..\..\MCLibrary\interface\" -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\..\..\MCLibrary\interface\common\"
#        -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I
#        "C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\List\RampExtMngrClass.lst
#    Object file  =  
#        C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082
#        Working
#        Directory\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\Obj\RampExtMngrClass.o
#
###############################################################################

C:\Users\csisko\Documents\GitHub\Projects\SW053-AVENGERPropulsion\EA082 Working Directory\Confidential\MCLibrary\src\RampExtMngrClass.c
      1          /**
      2            ******************************************************************************
      3            * @file    RampExtMngr.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.2.0
      6            * @date    20-Aug-2015 18:06
      7            * @brief   This file contains interface of RampMngr class
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "RampExtMngrClass.h"
     30          #include "RampExtMngrPrivate.h"
     31          #include "MC_type.h"
     32          
     33          #ifdef MC_CLASS_DYNAMIC
     34            #include "stdlib.h" /* Used for dynamic allocation */
     35          #else
     36            #define MAX_REMNG_NUM 4u
     37          
     38            _CREMNG_t REMNGpool[MAX_REMNG_NUM];
     39            unsigned char REMNG_Allocated = 0u;
     40          #endif
     41          
     42          #define CLASS_VARS   &((_CREMNG)this)->Vars_str
     43          #define CLASS_PARAMS  ((_CREMNG)this)->pParams_str
     44            
     45          static uint32_t getScalingFactor(int32_t wTarget);
     46          
     47          /**
     48            * @brief  Creates an object of the class RampMngr
     49            * @param  pRampMngrParams pointer to an RampMngr parameters structure
     50            * @retval CREMNG new instance of RampMngr object
     51            */
     52          CREMNG REMNG_NewObject(pRampExtMngrParams_t pRampExtMngrParams)
     53          {
     54            _CREMNG _oREMNG;
     55            
     56            #ifdef MC_CLASS_DYNAMIC
     57              _oREMNG = (_CREMNG)calloc(1u,sizeof(_CREMNG_t));
     58            #else
     59              if (REMNG_Allocated  < MAX_REMNG_NUM)
     60              {
     61                _oREMNG = &REMNGpool[REMNG_Allocated++];
     62              }
     63              else
     64              {
     65                _oREMNG = MC_NULL;
     66              }
     67            #endif
     68            
     69            _oREMNG->pParams_str = (pParams_t)pRampExtMngrParams;
     70            
     71            REMNG_Init((CREMNG)_oREMNG);
     72            
     73            return ((CREMNG)_oREMNG);
     74          }
     75          
     76          /**
     77            * @brief  It reset the state variable to zero.
     78            * @param  this related object of class CREMNG
     79            * @retval none.
     80            */
     81          void REMNG_Init(CREMNG this)
     82          {
     83            pVars_t pVars = CLASS_VARS;
     84            pVars->wExt = 0;
     85            pVars->wTargetFinal = 0;
     86            pVars->wRampRemainingStep = 0u;
     87            pVars->wIncDecAmount = 0;
     88            pVars->wScalingFactor = 1u;
     89          }
     90          
     91          /**
     92            * @brief  Exec the ramp calculations and returns the current value of the 
     93                      state variable. 
     94                      It must be called at fixed interval defined in the hExecFreq.
     95            * @param  this related object of class CREMNG
     96            * @retval int32_t value of the state variable
     97            */
     98          int32_t REMNG_Calc(CREMNG this)
     99          {
    100            int32_t wRetVal;
    101            pVars_t pVars = CLASS_VARS;
    102            int32_t wCurrentReference;
    103            
    104            wCurrentReference = pVars->wExt;
    105            
    106            /* Update the variable and terminates the ramp if needed. */
    107            if (pVars->wRampRemainingStep > 1u)
    108            {
    109              /* Increment/decrement the reference value. */
    110              wCurrentReference += pVars->wIncDecAmount;
    111              
    112              /* Decrement the number of remaining steps */
    113              pVars->wRampRemainingStep--;
    114            }
    115            else if (pVars->wRampRemainingStep == 1u)
    116            {
    117              /* Set the backup value of wTargetFinal. */
    118              wCurrentReference = pVars->wTargetFinal * (int32_t)(pVars->wScalingFactor);
    119              pVars->wRampRemainingStep = 0u;
    120            }
    121            else
    122            {
    123              /* Do nothing. */
    124            }
    125            
    126            pVars->wExt = wCurrentReference;
    127            
    128            wRetVal = pVars->wExt / (int32_t)(pVars->wScalingFactor);
    129            return wRetVal;
    130          }
    131          
    132          /**
    133            * @brief  Setup the ramp to be executed
    134            * @param  this related object of class CREMNG
    135            * @param  hTargetFinal (signed 32bit) final value of state variable at the end
    136            *         of the ramp.
    137            * @param  hDurationms (unsigned 32bit) the duration of the ramp expressed in 
    138            *         milliseconds. It is possible to set 0 to perform an instantaneous 
    139            *         change in the value.
    140            * @retval bool It returns TRUE is command is valid, FALSE otherwise
    141            */
    142          bool REMNG_ExecRamp(CREMNG this, int32_t wTargetFinal, uint32_t wDurationms)
    143          {
    144            pVars_t pVars = CLASS_VARS;
    145            pParams_t pParams = CLASS_PARAMS;
    146            uint32_t wAux;
    147            int32_t wAux1;
    148            int32_t wCurrentReference;
    149            bool retVal = TRUE;
    150            
    151            /* Get current state */
    152            wCurrentReference = pVars->wExt / (int32_t)(pVars->wScalingFactor);
    153            
    154            if (wDurationms == 0u)
    155            {
    156              pVars->wScalingFactor = getScalingFactor(wTargetFinal);
    157              pVars->wExt = wTargetFinal * (int32_t)(pVars->wScalingFactor);
    158              pVars->wRampRemainingStep = 0u;
    159              pVars->wIncDecAmount = 0;
    160            }
    161            else
    162            {
    163              uint32_t wScalingFactor = getScalingFactor(wTargetFinal - wCurrentReference);
    164              uint32_t wScalingFactor2 = getScalingFactor(wCurrentReference);
    165              uint32_t wScalingFactor3 = getScalingFactor(wTargetFinal);
    166              uint32_t wScalingFactorMin;
    167              
    168              if (wScalingFactor <  wScalingFactor2)
    169              {
    170                if (wScalingFactor < wScalingFactor3)
    171                {
    172                  wScalingFactorMin = wScalingFactor;
    173                }
    174                else
    175                {
    176                   wScalingFactorMin = wScalingFactor3;
    177                }
    178              }
    179              else
    180              {
    181                if (wScalingFactor2 < wScalingFactor3)
    182                {
    183                  wScalingFactorMin = wScalingFactor2;
    184                }
    185                else
    186                {
    187                   wScalingFactorMin = wScalingFactor3;
    188                } 
    189              }
    190              
    191              pVars->wScalingFactor = wScalingFactorMin;
    192              pVars->wExt = wCurrentReference * (int32_t)(pVars->wScalingFactor);
    193              
    194              /* Store the wTargetFinal to be applied in the last step */
    195              pVars->wTargetFinal = wTargetFinal;
    196              
    197              /* Compute the (wRampRemainingStep) number of steps remaining to complete 
    198              the ramp. */
    199              wAux = wDurationms * (uint32_t)pParams->hFrequencyHz; /* Check for overflow and use prescaler */
    200              wAux /= 1000u;
    201              pVars->wRampRemainingStep = wAux;
    202              pVars->wRampRemainingStep++;
    203              
    204              /* Compute the increment/decrement amount (wIncDecAmount) to be applied to 
    205              the reference value at each CalcTorqueReference. */
    206              wAux1 = (wTargetFinal - wCurrentReference) * (int32_t)(pVars->wScalingFactor);
    207              wAux1 /= (int32_t)(pVars->wRampRemainingStep);
    208              pVars->wIncDecAmount = wAux1;
    209            }
    210            
    211            return retVal;
    212          }
    213          
    214          /**
    215            * @brief  Returns the current value of the state variable.
    216            * @param  this related object of class CREMNG
    217            * @retval int32_t value of the state variable
    218            */
    219          int32_t REMNG_GetValue(CREMNG this)
    220          {
    221            int32_t wRetVal;
    222            pVars_t pVars = CLASS_VARS;
    223            wRetVal = pVars->wExt / (int32_t)(pVars->wScalingFactor);
    224            return wRetVal;
    225          }
    226          
    227          /**
    228            * @brief  Check if the settled ramp has been completed.
    229            * @param  this related object of class CREMNG.
    230            * @retval bool It returns TRUE if the ramp is completed, FALSE otherwise.
    231            */
    232          bool REMNG_RampCompleted(CREMNG this)
    233          {
    234            pVars_t pVars = CLASS_VARS;
    235            bool retVal = FALSE;
    236            if (pVars->wRampRemainingStep == 0u)
    237            {
    238              retVal = TRUE;
    239            }
    240            return retVal;
    241          }
    242          
    243          /**
    244            * @brief  Stop the execution of the ramp keeping the last reached value.
    245            * @param  this related object of class CREMNG.
    246            * @retval none
    247            */
    248          void REMNG_StopRamp(CREMNG this)
    249          {
    250            pVars_t pVars = CLASS_VARS;
    251            pVars->wRampRemainingStep = 0u;
    252            pVars->wIncDecAmount = 0;
    253          }
    254          
    255          /**
    256            * @brief  Calculating the scaling factor to maximixe the resolution. It
    257            *         perform the 2^int(31-log2(wTarget)) with an iterative approach.
    258            *         It allows to keep wTarget * Scaling factor inside s32 type.
    259            * @param  wTarget Input data.
    260            * @retval uint32_t It returns the optimized scaling factor.
    261            */
    262          static uint32_t getScalingFactor(int32_t wTarget)
    263          {
    264            uint8_t i;
    265            uint32_t wTargetAbs;
    266            if (wTarget < 0)
    267            {
    268              int32_t wAux;
    269              wAux = -wTarget;
    270              wTargetAbs = (uint32_t)(wAux);
    271            }
    272            else
    273            {
    274              wTargetAbs = (uint32_t)(wTarget);
    275            }
    276            for (i = 1u; i < 32u; i++)
    277            {
    278              uint32_t limit = ((uint32_t)(1) << (31u-i));
    279              if (wTargetAbs > limit)
    280              {
    281                break;
    282              }
    283            }
    284            return ((uint32_t)(1u) << (i-1u));
    285          }
    286          
    287          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   REMNG_Calc
      40   REMNG_ExecRamp
        40   -> getScalingFactor
       0   REMNG_GetValue
       0   REMNG_Init
       0   REMNG_NewObject
       0   REMNG_RampCompleted
       0   REMNG_StopRamp
       0   getScalingFactor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      16  ?Subroutine0
     116  REMNG_Allocated
          REMNGpool
      40  REMNG_Calc
     124  REMNG_ExecRamp
      10  REMNG_GetValue
       2  REMNG_Init
      32  REMNG_NewObject
      12  REMNG_RampCompleted
       8  REMNG_StopRamp
      36  getScalingFactor

 
 116 bytes in section .bss
 284 bytes in section .text
 
 284 bytes of CODE memory
 116 bytes of DATA memory

Errors: none
Warnings: none
