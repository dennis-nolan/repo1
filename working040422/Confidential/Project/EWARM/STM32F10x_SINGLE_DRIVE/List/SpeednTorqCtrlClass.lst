###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       04/Aug/2021  09:10:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c
#    Command line =  
#        -f C:\Users\jeana\AppData\Local\Temp\EW9C57.tmp
#        ("C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D MC_LIBRARY_SINGLE -lcN
#        "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\List"
#        -o "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\Obj"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_3\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\" -I
#        "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\MCLibrary\" -I
#        "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\MCLibrary\inc\" -I
#        "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\MCLibrary\interface\" -I
#        "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\MCLibrary\interface\common\"
#        -I "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\"
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0_3\arm\CMSIS\Core\Include\" -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0_3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\List\SpeednTorqCtrlClass.lst
#    Object file  =  
#        C:\Users\jeana\Desktop\speed
#        loop\working\Confidential\Project\EWARM\STM32F10x_SINGLE_DRIVE\Obj\SpeednTorqCtrlClass.o
#
###############################################################################

C:\Users\jeana\Desktop\speed loop\working\Confidential\MCLibrary\src\SpeednTorqCtrlClass.c
      1          /**
      2            ******************************************************************************
      3            * @file    SpeednTorqCtrlClass.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.2.0
      6            * @date    20-Aug-2015 18:06
      7            * @brief   This file contains interface of SpeednTorqCtrl class
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software
     20            * distributed under the License is distributed on an "AS IS" BASIS,
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "SpeednTorqCtrlClass.h"
     30          #include "SpeednTorqCtrlPrivate.h"
     31          #include "MCLibraryConf.h"
     32          #include "MC_type.h"
     33          
     34          // dcnq17 new variables
     35          extern unsigned short speedangle;
     36          extern unsigned short oldspeedangle;
     37          extern signed short myspeed;
     38          extern unsigned short start_dcnq;
     39          
     40          
     41          #ifdef MC_CLASS_DYNAMIC
     42            #include "stdlib.h" /* Used for dynamic allocation */
     43          #else
     44            _CSTC_t STCpool[MAX_STC_NUM];
     45            unsigned char STC_Allocated = 0u;
     46          #endif
     47          
     48          #define CLASS_VARS   &((_CSTC)this)->Vars_str
     49          #define CLASS_PARAMS  ((_CSTC)this)->pParams_str
     50          
     51          #define CHECK_BOUNDARY
     52          
     53          /**
     54            * @brief  Creates an object of the class SpeednTorqCtrl
     55            * @param  pSpeednTorqCtrlParams pointer to an SpeednTorqCtrl parameters structure
     56            * @retval CSTC new instance of SpeednTorqCtrl object
     57            */
     58          CSTC STC_NewObject(pSpeednTorqCtrlParams_t pSpeednTorqCtrlParams)
     59          {
     60            _CSTC _oSTC;
     61          
     62            #ifdef MC_CLASS_DYNAMIC
     63              _oSTC = (_CSTC)calloc(1u,sizeof(_CSTC_t));
     64            #else
     65              if (STC_Allocated  < MAX_STC_NUM)
     66              {
     67                _oSTC = &STCpool[STC_Allocated++];
     68              }
     69              else
     70              {
     71                _oSTC = MC_NULL;
     72              }
     73            #endif
     74          
     75            _oSTC->pParams_str = (pParams_t)pSpeednTorqCtrlParams;
     76          
     77            return ((CSTC)_oSTC);
     78          }
     79          
     80          /**
     81            * @brief  Initializes all the object variables, usually it has to be called
     82            *         once right after object creation.
     83            * @param  this related object of class CSTC.
     84            * @param  oPI the PI object used as controller for the speed regulation.
     85            *         It can be equal to MC_NULL if the STC is initialized in torque mode
     86            *         and it will never be configured in speed mode.
     87            * @param  oSPD the speed sensor used to perform the speed regulation.
     88            *         It can be equal to MC_NULL if the STC is used only in torque
     89            *         mode.
     90            * @retval none.
     91            */
     92          void STC_Init(CSTC this, CPI oPI, CSPD oSPD)
     93          {
     94            pVars_t pVars = CLASS_VARS;
     95            pParams_t pParams = CLASS_PARAMS;
     96          
     97          	pVars->oPISpeed = oPI;
     98            pVars->oSPD = oSPD;
     99            pVars->bMode = pParams->bModeDefault;
    100          	pVars->wSpeedRef01HzExt = (int32_t)pParams->hMecSpeedRef01HzDefault * 65536;
    101          	pVars->wTorqueRef = (int32_t)pParams->hTorqueRefDefault * 65536;
    102            pVars->hTargetFinal = 0;
    103          	pVars->wRampRemainingStep = 0u;
    104          	pVars->wIncDecAmount = 0;
    105          }
    106          
    107          /**
    108            * @brief It sets in real time the speed sensor utilized by the STC.
    109            * @param this related object of class CSTC
    110            * @param oSPD Speed sensor object to be set.
    111            * @retval none
    112            */
    113          void STC_SetSpeedSensor(CSTC this, CSPD oSPD)
    114          {
    115            pVars_t pVars = CLASS_VARS;
    116            pVars->oSPD = oSPD;
    117          }
    118          
    119          /**
    120            * @brief It returns the speed sensor utilized by the FOC.
    121            * @param this related object of class CSTC
    122            * @retval CSPD speed sensor utilized by the FOC.
    123            */
    124          CSPD STC_GetSpeedSensor(CSTC this)
    125          {
    126            pVars_t pVars = CLASS_VARS;
    127            return (pVars->oSPD);
    128          }
    129          
    130          /**
    131            * @brief  It should be called before each motor restart. If STC is set in
    132                      speed mode, this method resets the integral term of speed regulator.
    133            * @param this related object of class CSTC.
    134            * @retval none.
    135            */
    136          void STC_Clear(CSTC this)
    137          {
    138            pVars_t pVars = CLASS_VARS;
    139            if (pVars->bMode == STC_SPEED_MODE)
    140            {
    141              PI_SetIntegralTerm(((_CSTC)this)->Vars_str.oPISpeed,0);
    142            }
    143          }
    144          
    145          /**
    146            * @brief  Get the current mechanical rotor speed reference expressed in tenths
    147            *         of HZ.
    148            * @param  this related object of class CSTC.
    149            * @retval int16_t current mechanical rotor speed reference expressed in tenths
    150            *         of HZ.
    151            */
    152          int16_t STC_GetMecSpeedRef01Hz(CSTC this)
    153          {
    154            return ((int16_t)(((_CSTC)this)->Vars_str.wSpeedRef01HzExt/65536));
    155          }
    156          
    157          /**
    158            * @brief  Get the current motor torque reference. This value represents
    159            *         actually the Iq current reference expressed in digit.
    160            *         To convert current expressed in digit to current expressed in Amps
    161            *         is possible to use the formula:
    162            *         Current(Amp) = [Current(digit) * Vdd micro] / [65536 * Rshunt * Aop]
    163            * @param  this related object of class CSTC.
    164            * @retval int16_t current motor torque reference. This value represents
    165            *         actually the Iq current expressed in digit.
    166            */
    167          int16_t STC_GetTorqueRef(CSTC this)
    168          {
    169            return ((int16_t)(((_CSTC)this)->Vars_str.wTorqueRef/65536));
    170          }
    171          
    172          /**
    173            * @brief  Set the modality of the speed and torque controller. Two modality
    174            *         are available Torque mode and Speed mode.
    175            *         In Torque mode is possible to set directly the motor torque
    176            *         reference or execute a motor torque ramp. This value represents
    177            *         actually the Iq current reference expressed in digit.
    178            *         In Speed mode is possible to set the mechanical rotor speed
    179            *         reference or execute a speed ramp. The required motor torque is
    180            *         automatically calculated by the STC.
    181            *         This command interrupts the execution of any previous ramp command
    182            *         maintaining the last value of Iq.
    183            * @param  this related object of class CSTC.
    184            * @param  bMode modality of STC. It can be one of these two settings:
    185            *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
    186            *         enable the Speed mode.
    187            * @retval none
    188            */
    189          void STC_SetControlMode(CSTC this, STC_Modality_t bMode)
    190          {
    191            pVars_t pVars = CLASS_VARS;
    192            pVars->bMode = bMode;
    193            pVars->wRampRemainingStep = 0u; /* Interrupts previous ramp. */
    194          }
    195          
    196          /**
    197            * @brief  Get the modality of the speed and torque controller.
    198            * @param  this related object of class CSTC.
    199            * @retval STC_Modality_t It returns the modality of STC. It can be one of
    200            *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
    201            */
    202          STC_Modality_t STC_GetControlMode(CSTC this)
    203          {
    204            pVars_t pVars = CLASS_VARS;
    205            return pVars->bMode;
    206          }
    207          
    208          /**
    209            * @brief  Starts the execution of a ramp using new target and duration. This
    210            *         command interrupts the execution of any previous ramp command.
    211            *         The generated ramp will be in the modality previously set by
    212            *         STC_SetControlMode method.
    213            * @param  this related object of class CSTC
    214            * @param  hTargetFinal final value of command. This is different accordingly
    215            *         the STC modality.
    216            *         If STC is in Torque mode hTargetFinal is the value of motor torque
    217            *         reference at the end of the ramp. This value represents actually the
    218            *         Iq current expressed in digit.
    219            *         To convert current expressed in Amps to current expressed in digit
    220            *         is possible to use the formula:
    221            *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
    222            *         If STC is in Speed mode hTargetFinal is the value of mechanical
    223            *         rotor speed reference at the end of the ramp expressed in tenths of
    224            *         HZ.
    225            * @param  hDurationms the duration of the ramp expressed in milliseconds. It
    226            *         is possible to set 0 to perform an instantaneous change in the value.
    227            * @retval bool It return false if the absolute value of hTargetFinal is out of
    228            *         the boundary of the application (Above max application speed or max
    229            *         application torque or below min application speed depending on
    230            *         current modality of TSC) in this case the command is ignored and the
    231            *         previous ramp is not interrupted, otherwise it returns true.
    232            */
    233          bool STC_ExecRamp(CSTC this, int16_t hTargetFinal, uint32_t hDurationms)
    234          {
    235            pVars_t pVars = CLASS_VARS;
    236            pParams_t pParams = CLASS_PARAMS;
    237            bool AllowedRange = TRUE;
    238            uint32_t wAux;
    239            int32_t wAux1;
    240            int16_t hCurrentReference;
    241          
    242            /* Check if the hTargetFinal is out of the bound of application. */
    243            if (pVars->bMode == STC_TORQUE_MODE)
    244            {
    245              hCurrentReference = STC_GetTorqueRef(this);
    246              #ifdef CHECK_BOUNDARY
    247              if ((int32_t)hTargetFinal > (int32_t)pParams->hMaxPositiveTorque)
    248              {
    249                AllowedRange = FALSE;
    250              }
    251              if (hTargetFinal < pParams->hMinNegativeTorque)
    252              {
    253                AllowedRange = FALSE;
    254              }
    255              #endif
    256            }
    257            else
    258            {
    259              hCurrentReference = SPD_GetAvrgMecSpeed01Hz(pVars->oSPD);
    260              pVars->wSpeedRef01HzExt = (int32_t)hCurrentReference * (int32_t)65536;
    261              #ifdef CHECK_BOUNDARY
    262              if ((int32_t)hTargetFinal > (int32_t)pParams->hMaxAppPositiveMecSpeed01Hz)
    263              {
    264                AllowedRange = FALSE;
    265              } else
    266                if (hTargetFinal < pParams->hMinAppNegativeMecSpeed01Hz)
    267                {
    268                  AllowedRange = FALSE;
    269                } else
    270                  if ((int32_t)hTargetFinal < (int32_t)pParams->hMinAppPositiveMecSpeed01Hz)
    271                  {
    272                    if (hTargetFinal > pParams->hMaxAppNegativeMecSpeed01Hz)
    273                    {
    274                      AllowedRange = FALSE;
    275                    }
    276                  }
    277                  else{}
    278              #endif
    279            }
    280          
    281            if (AllowedRange == TRUE)
    282            {
    283              /* Interrupts the execution of any previous ramp command */
    284          
    285              if (hDurationms == 0u)
    286              {
    287                if (pVars->bMode == STC_SPEED_MODE)
    288                {
    289                  pVars->wSpeedRef01HzExt = (int32_t)hTargetFinal * 65536;
    290                }
    291                else
    292                {
    293                  pVars->wTorqueRef = (int32_t)hTargetFinal * 65536;
    294                }
    295                pVars->wRampRemainingStep = 0u;
    296                pVars->wIncDecAmount = 0;
    297              }
    298              else
    299              {
    300                /* Store the hTargetFinal to be applied in the last step */
    301                pVars->hTargetFinal = hTargetFinal;
    302          
    303                /* Compute the (wRampRemainingStep) number of steps remaining to complete
    304                the ramp. */
    305                wAux = (uint32_t)hDurationms * (uint32_t)pParams->hSTCFrequencyHz;
    306                wAux /= 1000u;
    307                pVars->wRampRemainingStep = wAux;
    308                pVars->wRampRemainingStep++;
    309          
    310                /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    311                the reference value at each CalcTorqueReference. */
    312                wAux1 = ((int32_t)hTargetFinal - (int32_t)hCurrentReference) * 65536;
    313                wAux1 /= (int32_t)pVars->wRampRemainingStep;
    314                pVars->wIncDecAmount = wAux1;
    315              }
    316            }
    317          
    318            return AllowedRange;
    319          }
    320          
    321          /**
    322            * @brief  This command interrupts the execution of any previous ramp command.
    323            *         If STC has been set in Torque mode the last value of Iq is
    324            *         maintained.
    325            *         If STC has been set in Speed mode the last value of mechanical
    326            *         rotor speed reference is maintained.
    327            * @param  this related object of class CSTC.
    328            * @retval none
    329            */
    330          void STC_StopRamp(CSTC this)
    331          {
    332            pVars_t pVars = CLASS_VARS;
    333            pVars->wRampRemainingStep = 0u;
    334          	pVars->wIncDecAmount = 0;
    335          }
    336          
    337          /**
    338            * @brief  It is used to compute the new value of motor torque reference. It
    339            *         must be called at fixed time equal to hSTCFrequencyHz. It is called
    340            *         passing as parameter the speed sensor used to perform the speed
    341            *         regulation.
    342            * @param  this related object of class CSTC.
    343            * @retval int16_t motor torque reference. This value represents actually the
    344            *         Iq current expressed in digit.
    345            *         To convert current expressed in Amps to current expressed in digit
    346            *         is possible to use the formula:
    347            *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
    348            */
    349          int16_t hMeasuredSpeedReported;
    350          int16_t STC_CalcTorqueReference(CSTC this)
    351          {
    352            pVars_t pVars = CLASS_VARS;
    353            int32_t wCurrentReference;
    354            int16_t hTorqueReference = 0;
    355            int16_t hMeasuredSpeed;
    356            int16_t hTargetSpeed;
    357            int16_t hError;
    358          
    359            if (pVars->bMode == STC_TORQUE_MODE)
    360            {
    361              wCurrentReference = pVars->wTorqueRef;
    362            }
    363            else
    364            {
    365              wCurrentReference = pVars->wSpeedRef01HzExt;
    366            }
    367          
    368            /* Update the speed reference or the torque reference according to the mode
    369               and terminates the ramp if needed. */
    370            if (pVars->wRampRemainingStep > 1u)
    371            {
    372              /* Increment/decrement the reference value. */
    373              wCurrentReference += pVars->wIncDecAmount;
    374          
    375              /* Decrement the number of remaining steps */
    376              pVars->wRampRemainingStep--;
    377            }
    378            else if (pVars->wRampRemainingStep == 1u)
    379            {
    380              /* Set the backup value of hTargetFinal. */
    381              wCurrentReference = (int32_t)pVars->hTargetFinal * 65536;
    382              pVars->wRampRemainingStep = 0u;
    383            }
    384            else
    385            {
    386              /* Do nothing. */
    387            }
    388          
    389            if (pVars->bMode == STC_SPEED_MODE)
    390            {
    391              /* Run the speed control loop */
    392          
    393          
    394          // dcnq17 calculate new speed estimate as first order difference in angle
    395          myspeed = speedangle - oldspeedangle;
    396          oldspeedangle = speedangle;
    397          
    398          
    399          
    400          //BETH 12/1/2017 DAC->DHR12L1 =  myangle;   //JDO
    401          
    402          //DAC->DHR12L1 = 32767 + (myspeed>>4);
    403          //DAC->SWTRIGR=1;
    404          
    405          
    406          
    407              /* Compute speed error */
    408          // dcnq17  re-calibrate reference for new speed feedback
    409             hTargetSpeed = (int16_t)(wCurrentReference / 9972); // JDO fb is 6.67 times bigger
    410              hMeasuredSpeed = SPD_GetAvrgMecSpeed01Hz(pVars->oSPD);
    411          
    412          // dcnq17  use new speed feedback to calculate error
    413          //    hError = hTargetSpeed - hMeasuredSpeed;
    414              hError = hTargetSpeed - myspeed;
    415          
    416              if(start_dcnq)
    417              {
    418                  hError = 0;
    419                  start_dcnq = 0;
    420              }
    421          
    422              hTorqueReference = PI_Controller(pVars->oPISpeed, (int32_t)hError);
    423          
    424          // dcnq17 output scaled speed to DAC
    425          // DAC->DHR12L1 =  myspeed * 10;  JDO REMOVED TO CHANGE DAC
    426          // DAC->SWTRIGR=1;
    427          
    428              pVars->wSpeedRef01HzExt = wCurrentReference;
    429              pVars->wTorqueRef = (int32_t)hTorqueReference * 65536;
    430            }
    431            else
    432            {
    433              pVars->wTorqueRef = wCurrentReference;
    434              hTorqueReference = (int16_t)(wCurrentReference / 65536);
    435            }
    436            hMeasuredSpeedReported = myspeed;
    437            return hTorqueReference;
    438          
    439          }
    440          
    441          /**
    442            * @brief  Get the Default mechanical rotor speed reference expressed in tenths
    443            *         of HZ.
    444            * @param  this related object of class CSTC.
    445            * @retval int16_t It returns the Default mechanical rotor speed. reference
    446            *         expressed in tenths of HZ.
    447            */
    448          int16_t STC_GetMecSpeedRef01HzDefault(CSTC this)
    449          {
    450            pParams_t pParams = CLASS_PARAMS;
    451          
    452            return pParams->hMecSpeedRef01HzDefault;
    453          }
    454          
    455          /**
    456            * @brief  Get the Application maximum positive value of rotor speed. It's
    457                      expressed in tenth of mechanical Hertz.
    458            * @param  this related object of class CSTC.
    459            * @retval uint16_t It returns the application maximum positive value of rotor
    460                      speed expressed in tenth of mechanical Hertz.
    461            */
    462          uint16_t STC_GetMaxAppPositiveMecSpeed01Hz(CSTC this)
    463          {
    464            pParams_t pParams = CLASS_PARAMS;
    465          
    466            return pParams->hMaxAppPositiveMecSpeed01Hz;
    467          }
    468          
    469          /**
    470            * @brief  Get the Application minimum negative value of rotor speed. It's
    471                      expressed in tenth of mechanical Hertz.
    472            * @param  this related object of class CSTC.
    473            * @retval uint16_t It returns the application minimum negative value of rotor
    474                      speed expressed in tenth of mechanical Hertz.
    475            */
    476          int16_t STC_GetMinAppNegativeMecSpeed01Hz(CSTC this)
    477          {
    478            pParams_t pParams = CLASS_PARAMS;
    479          
    480            return pParams->hMinAppNegativeMecSpeed01Hz;
    481          }
    482          
    483          /**
    484            * @brief  Check if the settled speed or torque ramp has been completed.
    485            * @param  this related object of class CSTC.
    486            * @retval bool It returns TRUE if the ramp is completed, FALSE otherwise.
    487            */
    488          bool STC_RampCompleted(CSTC this)
    489          {
    490            pVars_t pVars = CLASS_VARS;
    491            bool retVal = FALSE;
    492            if (pVars->wRampRemainingStep == 0u)
    493            {
    494              retVal = TRUE;
    495            }
    496            return retVal;
    497          }
    498          
    499          /**
    500            * @brief It returns the default values of Iqdref.
    501            * @param this related object of class CSTC
    502            * @retval default values of Iqdref.
    503            */
    504          Curr_Components STC_GetDefaultIqdref(CSTC this)
    505          {
    506            pParams_t pParams = CLASS_PARAMS;
    507            Curr_Components IqdRefDefault;
    508            IqdRefDefault.qI_Component1 = pParams->hTorqueRefDefault;
    509            IqdRefDefault.qI_Component2 = pParams->hIdrefDefault;
    510            return IqdRefDefault;
    511          }
    512          
    513          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   STC_CalcTorqueReference
        16   -> PI_Controller
        16   -> SPD_GetAvrgMecSpeed01Hz
       0   STC_Clear
         0   -> PI_SetIntegralTerm
      32   STC_ExecRamp
        32   -> SPD_GetAvrgMecSpeed01Hz
       0   STC_GetControlMode
       4   STC_GetDefaultIqdref
       0   STC_GetMaxAppPositiveMecSpeed01Hz
       0   STC_GetMecSpeedRef01Hz
       0   STC_GetMecSpeedRef01HzDefault
       0   STC_GetMinAppNegativeMecSpeed01Hz
       0   STC_GetSpeedSensor
       0   STC_GetTorqueRef
       0   STC_Init
       0   STC_NewObject
       0   STC_RampCompleted
       0   STC_SetControlMode
       0   STC_SetSpeedSensor
       0   STC_StopRamp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
      10  ?Subroutine0
      36  STC_Allocated
          STCpool
     128  STC_CalcTorqueReference
      16  STC_Clear
     154  STC_ExecRamp
       4  STC_GetControlMode
      24  STC_GetDefaultIqdref
       6  STC_GetMaxAppPositiveMecSpeed01Hz
       4  STC_GetMecSpeedRef01Hz
       8  STC_GetMecSpeedRef01HzDefault
       8  STC_GetMinAppNegativeMecSpeed01Hz
       4  STC_GetSpeedSensor
       2  STC_GetTorqueRef
      36  STC_Init
      22  STC_NewObject
      12  STC_RampCompleted
       8  STC_SetControlMode
       4  STC_SetSpeedSensor
       8  STC_StopRamp
       2  hMeasuredSpeedReported

 
  38 bytes in section .bss
 482 bytes in section .text
 
 482 bytes of CODE memory
  38 bytes of DATA memory

Errors: none
Warnings: 1
